2D Lattice calculation tools. Calculate orientation-aware and unaware root forms and projected forms of (respectively) rigid motion, isometry and similarity classes of two dimensional lattices described in [1], as well as spherical root and projected invariants and G-chiral distances described in [2]

[1] - Bright, M.J. Cooper A., Kurlin, V. 'Geographic-Style Maps of Two Dimensional Lattices' - Acta Cryst A, 79(1), Jan 2023
[2] - Bright, M.J. Cooper A., Kurlin, V. 'Continuous Chiral Distances on Two DImensional Lattices'   https://doi.org/10.1002/chir.23598

**GETTING STARTED**
To enter a lattice for analysis, create a lattice object as a list of vectors: 'lattice = Lat2D([[x1,x2],[y1,y2])'. If your input data is given in terms of lattice lengths 'a, b' and an angle 'theta' then the untility function 'makelat(a,b,theta)' will return a 'Lat2D' object. Note that the lattice in this case will *not* necessarily be reduced. To produce an obtuse superbase from which one may derive a reduced lattice you will need the method 'lattice.makeobsb()', which will return an unordered list of three vectors, the shortest two of which will be the reduced lattice. 

See the expanded documentation for 

The method 'lattice.make_rf()' will generate the Root Invariant for the lattice, while 'lattice.make_pf()' will generate the Projected Invariant. Spherical Root Invariants are generated by lattice.lat_to_SRI()

If you are starting from a root form object it should be with code of the form 'rf = RF2_signed([x,y,z], s)' where s is either 1, -1 or 0 depending on the sign of the root form. Inverse computation of the lattice object uses the 'rf.make2lat()' method. Similarly, a projected form can be entered as 'pf = PF2([x,y], s)' with s as before, and 'pf.lattice_from_pf2(sc=1)' will return a lattice object whose shortest vector is rotated and scaled to [1,0]. 

Given two lattices 'lat_1, lat_2', the function 'rf2dist(lat_1, lat_2, dtype = 0)' will return the root metric RM_q between lat_1 and lat_2 for q = infty. For the Euclidean distance set 'dtype = 2'. Similarly, the function 'pf2dist(lat_1, lat_2, dtype = 0)' will return the projected metric PM_q distance.

For a given lattice 'lat' function 'lat.rf_grpchir(lat, dtype = 0, pgroup = 2)' will return the [D2]-root chiral distance using the Chebyshev metric. Set pgroup to 4 or 6 to return the [D4] and [D6]-root chiral distances respectively, and set dtype=2 to use the Euclidean metric. The function 'lat.pf_grpchir(lat, dtype = 0, pgroup = 2)' will do the same thing for the [D2]-projected chiral distance. 
