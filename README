The code in this repository can calculate the root form of a 2D lattice, proved to be an invariant up to isometry and change of basis in [1], as well as the G-chirality and distance between two lattices derived from the root form described in the same paper. It also enables you to plot the coordinates of a lattice in the quotient square and spherical maps outlined in [2], and conduct inverse design frm a root form or projected form to reconstitute a lattice (up to scaling in the case of a projected form). 

The code requires mostly standard python packages, although the core module from Pymatgen [3] is used to shorten the process of generating an obtuse superbase by ensuring that the algorithm begins from a Niggli reduced lattice 

**UTILITY FUNCTIONS**

distgen(q, v1, v2) is a generic Minkowski distance calculation for v1, v2 in R^2. It will calculate the L_q norm of the vector v2-v1. Setting q=0 returns the Chebyshev distance.

mincyc(l) takes any list of floats or integers and permutes it cyclically until the lowest value of l is first

roundlist(l, r=2) rounds any list of numbers to r d.p.

minf(a,b,c,d) calculates the M_inf quantity defined in [1] given four input values.

makelat(a,b,t) generates a lattice with co-ordinates (a,0) and (a*cos(t), b*cos(t)) for the given input values

sb_sign(veclist) takes an input list of three vectors in r2 which are assumed to be those of an obtuse superbase and returns the sign of the lattice as defined in [1]

index_sorted(l) takes any list of values. It returns a list of the same length whose ith entry is the index that the ith entry of the input list would be in a sorted version of that list. 

**LATTICE CLASS**

The lattice object is constructed from two input vectors (lists of two floats). It is equipped with:
- self.x, self.y are the individual vectors (returned in the order in which they are entered)
- self.ob is the superbase vector given by the negative of the sum of the two input vectors
- self.xlen, self.ylen and self.oblen are the lengths of each superbase vector
- self.inner is the inner (dot) product of self.x and self.y
- self.angle is the angle (in degrees) between self.x and self.y

The lattice has the following methods:

- make_obsb() will generate the unique obtuse superbase of the lattice. It outputs a list of three vectors v0, v1, v2 where v0 = -(v1 + v2), and a number which is the number of reduction steps . This second number is not used in any other method, but may be extracted for interest
- make_cf() and make_vf() generates the coform and voform of the obtuse superbase as defined in [1]
- lattice_sign() calculates the sign of the input lattice
- make_rf() outputs the oriented root form as a root form object(see below) -  list of ordered values and a value in {-1, 0 +1} which is the sign of the underlying lattice. 


**ROOT FORM CLASS**

The root form object is constructed from a list of three ordered values and a sign value from {-1, 0, 1}. It is equipped with:
  - self.vec is the list of values
  - self.sign is the lattice sign
  - self.r_12, self.r_01 and self.r_02 are the individual root form values
 
 The root form has the following methods:
 
 - rightsign() will invert the last two values of self.vec if self.sign = -1
 - rf_grpchir(pgroup = 2, dtype = 0) will calculate the Chebyshev or Euclidean distance in the three dimensional space of root forms (depending on whether dtype = 0 or dtype = 2) from the closest molecule with D2, D4 or D6 point group symmetry depending on the value of pgroup. Currently implemented only for pgroup = 0 and pgroup = 2.
 - rf_chir() will return the overall chirality (minimum distance over all chiralities)
 - projform() will give a projected form object (see below) derived from the root form - x, y co-ordinates in the Quotient Triangle (see [2]) and a sign
 - coform2d() and voform2d() reconstruct the coform and voform [1] from the root form
 - make2lat() will derive a lattice from the root form
 
 **PROJECTED FORM CLASS**
 
 The projected form object is constructed from a list of tw0  values and a sign value from {-1, 0, 1}. It is equipped with:
  - self.qtpoint is the list of values
  - self.x and self.y are the x and y co-ordinates in the quotient triangle
  - self.sign is the projected form sign
  - self.r_12, self.r_01 and self.r_02 are the individual root form values
 
The root form has the following methods:

- qsplot() gives co-ordinates in the quotient square (see [2])
- sphere_proj() gives a latitude and longitude on the spherical map (see [2])
 - pf_grpchir(pgroup = 2, dtype = 0) will calculate the Chebyshev or Euclidean distance in the Quotient Triangle (depending on whether dtype = 0 or dtype = 2) from the closest point to the lattice with  D2 (triangle edge), D4 (point 0,0) or D6 (1,1) point group symmetry depending on the value of pgroup. Currently implemented only for pgroup = 0 and pgroup = 2.
 - pf_chir() will return the overall chirality (minimum distance over all chiralities)
 -root_from_PF2(scale = 1) will reconstitue the root form with an input scaling factor, defaulting to 1
 - lattice_from_PF2(sc = 1) will reconstitue a lattice from the projected form given a scaling factor, defaulting to 1
